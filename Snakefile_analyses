(IDS, TRIMMED, COV) = glob_wildcards("data/simulated/{sample}_{trimmed}_{cov}_R1.fastq.gz")

print(IDS)
print(TRIMMED)
print(COV)

IDS_UNIQ = set(IDS)
TRIMMED_UNIQ = set(TRIMMED)
COV_UNIQ = set(COV)

rule all:
  input:
    expand("data/amr/{sample}_{trimmed}_{cov}_amr.txt", sample = IDS_UNIQ, trimmed = TRIMMED_UNIQ, cov = COV_UNIQ),
    expand("data/assembly/{sample}_{trimmed}_{cov}_contigs.fa, sample = IDS_UNIQ, trimmed = TRIMMED_UNIQ, cov = COV_UNIQ),
    expand("data/mlst/{sample}_{trimmed}_{cov}_mlst.txt", sample = IDS_UNIQ, trimmed = TRIMMED_UNIQ, cov = COV_UNIQ)

rule assemble:
  input:
    R1 = "data/simulated_trimmed/{sample}_{trimmed}_{cov}_R1.fastq.gz",
    R2 = "data/simulated_trimmed/{sample}_{trimmed}_{cov}_R2.fastq.gz",
  output:
    contigs = "data/assembly/{sample}_{trimmed}_{cov}_contigs.fa
  #params:
  conda:
    "envs/skesa_env.yaml"
  message:
    "Running skesa on sample {sample}"
  shell:
  """
    skesa --fastq {input.R1},{input.R2} -- > {output.contigs}
  """
  
rule mlst:
  input:
    rules.assemble.output.contigs
  output:
    "data/mlst/{sample}_{trimmed}_{cov}_mlst.txt"
  threads: 1
  params: None
  conda:
      "envs/mlst.yaml"
  message:
        "Running mlst on sample {}"
  shell:
    """
      mlst -q {input} > {output}
    """
    
    
rule amr: ### steal from https://github.com/pha4ge/hAMRonization_workflow/tree/master/rules
  input:
    rules.assemble.output.contigs
  output:
    "data/amr/{sample}_{trimmed}_{cov}_amr.txt"
  params: None
  conda:
    "envs/abricate.yaml"
#  message:
#    "Running XXX on sample {wildcard.sa}
  shell:
    """
    abricate -q  {input} > {output}
    """
  
